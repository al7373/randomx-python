import unittest
from randomx.configuration import RANDOMX_ARGON_ITERATIONS, RANDOMX_ARGON_LANES, RANDOMX_ARGON_MEMORY, RANDOMX_ARGON_SALT
from randomx.getMixBlock import getMixBlock
from randomx.randomx_alloc_cache import randomx_alloc_cache
from randomx.initCache import initCache

class TestGetMixBlock(unittest.TestCase):

    def test_getMixBlock(self):
        self.assertEqual(RANDOMX_ARGON_ITERATIONS, 3)
        self.assertEqual(RANDOMX_ARGON_LANES, 1)
        self.assertEqual(RANDOMX_ARGON_MEMORY, 262144)
        self.assertEqual(RANDOMX_ARGON_SALT, "RandomX\x03")

        cache = randomx_alloc_cache()

        key = "test key 000"

        initCache(cache, key, len(key))

        mix_block_0 = getMixBlock(0, cache.memory)

        expected_0 = bytearray([
            0x86,	0x21,	0xc0,	0x23,	0x1d,	0x0e,	0x1e,	0x19,
            0x15,	0x4c,	0x40,	0x41,	0x87,	0xdd,	0x6b,	0xf0,
            0xd4,	0xd7,	0x2b,	0x0b,	0x5d,	0x95,	0xe6,	0x2a,
            0x5b,	0x24,	0x63,	0x12,	0x91,	0x64,	0x0b,	0x7a,
            0xde,	0xd8,	0x6c,	0xfe,	0xa4,	0x85,	0xef,	0x13,
            0xa4,	0x6d,	0x3e,	0xa4,	0x10,	0x39,	0x55,	0x55,
            0x9c,	0x4f,	0xbb,	0x18,	0x3a,	0x84,	0x39,	0x77,
            0x9d,	0x43,	0xc1,	0xcf,	0x3f,	0xa4,	0xd8,	0x70
        ])

        self.assertEqual(mix_block_0, expected_0)

        mix_block_20000000 = getMixBlock(20000000, cache.memory)

        expected_20000000 = bytearray([
            0x3d,	0xdb,	0x5a,	0xde,	0xad,	0x77,	0xb2,	0xc5,
            0x65,	0x8a,	0x7b,	0xb1,	0x72,	0x16,	0x1c,	0x6e,
            0x8a,	0xad,	0xb1,	0x72,	0xe6,	0x83,	0x5d,	0x37,
            0x8f,	0xad,	0xba,	0x44,	0xda,	0x43,	0x8f,	0xfa,
            0x88,	0xa5,	0xf8,	0x7d,	0x53,	0x69,	0xfe,	0x13,
            0x59,	0x01,	0x97,	0x64,	0x50,	0x06,	0x2e,	0x43,
            0xa6,	0xba,	0x86,	0x51,	0x61,	0x20,	0xa5,	0xb0,
            0x98,	0x59,	0x39,	0x34,	0xe7,	0xfb,	0x41,	0x74
        ])

        self.assertEqual(mix_block_20000000, expected_20000000)

        mix_block_30000000 = getMixBlock(30000000, cache.memory)

        expected_30000000 = bytearray([
            0xb3,	0x53,	0xdf,	0x28,	0x14,	0x20,	0x5b,	0x60,
            0x4b,	0xc8,	0x9d,	0x48,	0x5c,	0x18,	0xd6,	0x59,
            0x5c,	0x0b,	0x94,	0x36,	0x80,	0x2d,	0xc7,	0xaf,
            0xf8,	0xf8,	0xa0,	0xbc,	0xc5,	0x6f,	0xdb,	0x29,
            0x9b,	0xf9,	0xb7,	0xce,	0xa5,	0x2e,	0x57,	0x43,
            0x29,	0x35,	0xd1,	0x89,	0x16,	0x87,	0x3e,	0x46,
            0xbb,	0x85,	0x98,	0xd5,	0xfa,	0x73,	0x0e,	0xe0,
            0x83,	0x10,	0xbd,	0x11,	0x19,	0x33,	0x6c,	0xb2
        ])

        self.assertEqual(mix_block_30000000, expected_30000000)


        mix_block_30459074 = getMixBlock(30459074, cache.memory)

        expected_30459074 = bytearray([
            0x00,	0xec,	0xe4,	0xee,	0x75,	0x00,	0x46,	0x36,
            0x46,	0xd3,	0x56,	0xe9,	0xb8,	0x9c,	0x36,	0x74,
            0x6d,	0xf0,	0x60,	0x76,	0x8a,	0x4b,	0x5d,	0x3c,
            0xa6,	0x88,	0x23,	0x5b,	0xc1,	0x9e,	0x58,	0xd5,
            0xbf,	0x5a,	0xee,	0xbb,	0xbf,	0xfe,	0xa6,	0x0c,
            0x42,	0xd0,	0x7b,	0xe9,	0x9c,	0x7f,	0x84,	0x2f,
            0xf8,	0x1c,	0x97,	0x24,	0x20,	0x8f,	0x9e,	0xbd,
            0x01,	0x80,	0x14,	0x52,	0xc1,	0x81,	0xb8,	0x28
        ])

        self.assertEqual(mix_block_30459074, expected_30459074)




